# pip install googlemaps
# pip install PyMySQL

# REFERENCES:
'''
https://www.youtube.com/watch?v=YwIu2Rd0VKM
https://www.youtube.com/watch?v=qkSmuquMueA
'''

import googlemaps
import pymysql.cursors
import time
import random

def miles_to_meters(miles):
    try:
        return miles * 1609.344
    except:
        return 0

# define our API key
# there needs to be a way to make this private - otherwise it is exposed.
API_KEY = 'AIzaSyDBtBnlxNkciKRuEyx0nILVU66Q9uWlXxY'

# define our client
    # authenticate using the API key.
gmaps = googlemaps.Client(key = API_KEY)

# define a list of restaurants
restaurantList = []

# define our search

    # define our location (the x and y coordinates of UF) as a tuple
    # reference: https://www.google.com/maps/place/University+of+Florida/@29.6436371,-82.3571189,17z/data=!4m14!1m7!3m6!1s0x88e8a30cfbe49275:0x206fe0de143d9886!2sUniversity+of+Florida!8m2!3d29.6436325!4d-82.3549302!16s%2Fm%2F0j_sncb!3m5!1s0x88e8a30cfbe49275:0x206fe0de143d9886!8m2!3d29.6436325!4d-82.3549302!16s%2Fm%2F0j_sncb
UF_coordinates = (29.6436371, -82.3571189)

    # we will be searching within a 5-mile radius, but the search accepts a radius in METERS.
search_radius = miles_to_meters(5)

    # call the search
places_result = gmaps.places_nearby(
    location = UF_coordinates, 
    radius = search_radius,
    type = ['restaurant', 'food']
)

# fill the restaurant list with the results of this API call
restaurantList.extend(places_result.get('results'))

# however, there is a small problem: each search only finds 20 items
    # in order to find the next 20 items, you must call the search again
    # with the next page token.
next_page_token = places_result.get('next_page_token')

while next_page_token:
    time.sleep(2) # there is a pause while the next page is generated by the API.
    places_result = gmaps.places_nearby(
        location = UF_coordinates, 
        radius = search_radius,
        type = ['restaurant', 'food'],
        page_token = next_page_token
    )
    restaurantList.extend(places_result.get('results'))
    next_page_token = places_result.get('next_page_token')

# now, the restaurant list is populated with ALL RESTAURANTS in a 5-mile radius of UF.

'''
Previously, we were going to export this data into a .json file and then read it in order to populate the database with the restaurants.
However, this is unnecessary if the model already exists in the database, since all of the information we need is in the restaurantList array.

DEPRECATED:
# create a data frame using pandas containing each restaurant and its information.
dataframe = pd.DataFrame(restaurantList)
dataframe['url'] = 'https://www.google.com/maps/place/?q=place_id:' + dataframe['place_id']
# export the data frame into a .json file and a .xlsx file for further use.
dataframe.to_json('restaurants.json', orient='table')
dataframe.to_excel('restaurants.xlsx', index=False)
'''


'''
Note that a random number between 0 and 1 is used to determine whether or not a restaurant is assigned a particular socially good category.
THIS WORKAROUND IS FOR DEMO PURPOSES ONLY.
RELEVANT, SPECIFIC, AND ACCURATE INFORMATION REGARDING A RESTAURANT'S ENVIRONMENTAL CONSCIOUSNESS, OWNERSHIP STATUS, AND PHILANTHROPY IS NOT READILY AVAILABLE TO OUR GROUP.
'''

connection = pymysql.connect(
    host = 'peard-database.cbiya7huefjt.us-east-1.rds.amazonaws.com',
    user = 'pearddev',
    password = 'Peepeep00p0031!',
    database = 'peard',
    cursorclass = pymysql.cursors.DictCursor
)

with connection:
    with connection.cursor() as cursor:
        # Create a new record
        # https://stackoverflow.com/questions/5785154/python-mysqldb-issues-typeerror-d-format-a-number-is-required-not-str
        sql = "INSERT INTO api_restaurant (name, address, photo_ref, price_level, rating, url, env_conscious, minority, philanthropic) values (%s, %s, %s, %s, %s, %s, %s, %s, %s)"
        
        for restaurant in restaurantList:
            
            cursor.execute(
                            sql, (
                                    restaurant['name'],
                                    restaurant['vicinity'],
                                    restaurant['photos'][0]['photo_reference'],
                                    restaurant['price_level'],
                                    restaurant['rating'],
                                    ('https://www.google.com/maps/place/?q=place_id:' + restaurant['place_id']),
                                    random.choice([0, 1]),
                                    random.choice([0, 1]),
                                    random.choice([0, 1])
                                )
                            )
        
        connection.commit()